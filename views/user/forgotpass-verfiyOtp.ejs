<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
         <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            min-height: 100vh;
            width: 100%;
        }

        .container {
            display: flex;
            min-height: 100vh;
            width: 100%;
        }
        
        .verify-otp-section {
            flex: 1;
            padding: 2rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            width: 50%;
        }
        
        .logo {
            margin-bottom: 2rem;
        }
        
        .logo img {
            width: 150px;
            height: auto;
            object-fit: contain;
        }
        
        h2 {
            color: #333;
            margin-bottom: 1rem;
        }
        
        .instruction {
            color: #666;
            margin-bottom: 2rem;
            text-align: center;
            max-width: 400px;
        }
        
        .input-group {
            width: 100%;
            max-width: 400px;
            margin-bottom: 1.5rem;
        }
        
        .input-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #555;
            font-size: 0.9rem;
        }
        
        .otp-inputs {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-bottom: 1.5rem;
        }

        .otp-inputs input {
            width: 50px;
            height: 50px;
            text-align: center;
            font-size: 1.2rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 0.5rem;
        }

        .otp-inputs input:focus {
            border-color: #007bff;
            outline: none;
        }
        
        .text-danger {
            color: #dc3545;
            margin: 0.5rem 0;
        }
        
        .verify-btn {
            width: 100%;
            max-width: 400px;
            padding: 1rem;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s;
        }
        
        .verify-btn:hover {
            background-color: #0056b3;
        }

        .resend-otp {
            margin-top: 1rem;
            text-align: center;
            color: #666;
        }

        .resend-otp button {
            background: none;
            border: none;
            color: #007bff;
            cursor: pointer;
            text-decoration: underline;
            padding: 0;
            font-size: 1rem;
        }

        .resend-otp button:hover {
            color: #0056b3;
        }
        
        .back-to-login {
            margin-top: 1.5rem;
            text-align: center;
            color: #666;
        }
        
        .back-to-login a {
            color: #007bff;
            text-decoration: none;
        }
        
        .back-to-login a:hover {
            text-decoration: underline;
        }
        
        .image-section {
            flex: 1;
            width: 50%;
            background-color: #f8f9fa;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }
        
        .image-section img {
            width: 740px;
            height: 740px;
            object-fit: cover;
        }
        
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
            }
            
            .verify-otp-section {
                width: 100%;
                padding: 1rem;
            }
            
            .image-section {
                display: none;
            }

            .otp-inputs {
                gap: 0.5rem;
            }

            .otp-inputs input {
                width: 40px;
                height: 40px;
                font-size: 1rem;
            }
        }
        .resend-container {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 5px;
    margin-top: 15px;
}

.resend-otp {
    color: #007bff;
    text-decoration: none;
    cursor: pointer;
}

.resend-otp.disabled {
    color: #6c757d;
    cursor: not-allowed;
    pointer-events: none;
}

.timer {
    color: #dc3545;
    font-size: 14px;
}

.resend-otp p {
    margin: 0;
}
    </style>
</head>

<body>
    <div class="container">
        <div class="verify-otp-section">
            <div class="logo"> 
                <img src="/images/BrandName.png" alt="Expansy">
            </div>
        
            <h2>Verify OTP</h2>
            <p class="instruction">Please enter the 6-digit code sent to your email address</p>
            
            <form id="otpForm">
                <div class="d-flex justify-content-center gap-2 mb-4">
                    <input type="text" class="form-control text-center" style="width: 45px; height: 45px;" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" class="form-control text-center" style="width: 45px; height: 45px;" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" class="form-control text-center" style="width: 45px; height: 45px;" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" class="form-control text-center" style="width: 45px; height: 45px;" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" class="form-control text-center" style="width: 45px; height: 45px;" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" class="form-control text-center" style="width: 45px; height: 45px;" maxlength="1" pattern="[0-9]" inputmode="numeric">
                </div>

                <div class="alert alert-danger d-none" id="errorMessage"></div>
                <div class="alert alert-success d-none" id="successMessage"></div>

                <button type="submit" class="btn btn-primary w-100 mb-3">Verify OTP</button>

                <div class="text-center">
                    <div id="timerSection" class="mb-2">
                        <span class="text-muted">Resend OTP in </span>
                        <span class="text-danger" id="timer">60s</span>
                    </div>
                    <button type="button" id="resendButton" class="btn btn-link text-decoration-none d-none">
                        Resend OTP
                    </button>
                </div>
            </form>
        
            <p class="back-to-login">Remember your password? <a href="/login">Back to Login</a></p>
        </div>
        
        <div class="image-section">
            <img src="/images/two-factor-authentication-concept-illustration_114360-5488.avif" alt="Verify OTP">
        </div>
    </div>

    <script>
        
        const inputs = document.querySelectorAll('input');
const form = document.getElementById('otpForm');
const timerElement = document.getElementById('timer');
const timerSection = document.getElementById('timerSection');
const resendButton = document.getElementById('resendButton');
const errorMessage = document.getElementById('errorMessage');
const successMessage = document.getElementById('successMessage');

let timeLeft = 60;
let timerId = null;

// Handle OTP input
inputs.forEach((input, index) => {
    input.addEventListener('input', (e) => {
        // Allow only numbers
        e.target.value = e.target.value.replace(/[^0-9]/g, '');
        
        // Auto-focus next input
        if (e.target.value && index < inputs.length - 1) {
            inputs[index + 1].focus();
        }
    });

    input.addEventListener('keydown', (e) => {
        // Handle backspace
        if (e.key === 'Backspace' && !e.target.value && index > 0) {
            inputs[index - 1].focus();
        }
    });

    input.addEventListener('paste', (e) => {
        e.preventDefault();
        const pasteData = e.clipboardData.getData('text').slice(0, inputs.length);
        
        if (/^\d+$/.test(pasteData)) {
            [...pasteData].forEach((digit, i) => {
                if (inputs[i]) {
                    inputs[i].value = digit;
                    if (i < inputs.length - 1) {
                        inputs[i + 1].focus();
                    }
                }
            });
        }
    });
});

// Timer functionality
function startTimer() {
    timeLeft = 60;
    timerSection.classList.remove('d-none');
    resendButton.classList.add('d-none');
    
    if (timerId) {
        clearInterval(timerId);
    }
    
    timerId = setInterval(() => {
        timeLeft--;
        timerElement.textContent = `${timeLeft}s`;
        
        if (timeLeft <= 0) {
            clearInterval(timerId);
            timerSection.classList.add('d-none');
            resendButton.classList.remove('d-none');
        }
    }, 1000);
}

// Start timer on page load
startTimer();

// Get OTP value
function getOTPValue() {
    return Array.from(inputs).map(input => input.value).join('');
}

// Show message function
function showMessage(element, message) {
    element.textContent = message;
    element.classList.remove('d-none');
    setTimeout(() => {
        element.classList.add('d-none');
    }, 3000);
}

// Resend OTP
resendButton.addEventListener('click', async () => {
    try {
        const response = await fetch('/verify-pass-resend-otp', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            
        });

        const data = await response.json();

        if (data.success) {
            inputs.forEach(input => input.value = '');
            inputs[0].focus();
            startTimer();
            showMessage(successMessage, data.message || 'OTP sent successfully!');
        } else {
            throw new Error(data.message || 'Failed to send OTP');
        }
    } catch (error) {
        showMessage(errorMessage, error.message);
    }
});

// Form submission
form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const otp = getOTPValue();
    
    if (otp.length !== 6) {
        showMessage(errorMessage, 'Please enter all 6 digits');
        return;
    }

    try {
        const response = await fetch('/verify-pass-forgot-otp', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ otp })
        });

        const data = await response.json();

        if (data.success) {
            window.location.href = data.redirectUrl || '/change-password';
        } else {
            throw new Error(data.message || 'Invalid OTP');
        }
    } catch (error) {
        showMessage(errorMessage, error.message);
    }
});
    </script>
</body>
</html>