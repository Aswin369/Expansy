<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    min-height: 100vh;
    width: 100%;
}

.container {
    display: flex;
    min-height: 100vh;
    width: 100%;
}

.change-password-section {
    flex: 1;
    padding: 2rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 50%;
}

.logo {
    margin-bottom: 2rem;
}

.logo img {
    width: 150px;
    height: auto;
    object-fit: contain;
}

h2 {
    color: #333;
    margin-bottom: 1rem;
}

.instruction {
    color: #666;
    margin-bottom: 2rem;
    text-align: center;
    max-width: 400px;
}

/* Form container to maintain consistent width */
form {
    width: 100%;
    max-width: 400px;
}

.input-group {
    width: 100%;
    margin-bottom: 1.5rem;
    position: relative;
}

.input-group label {
    display: block;
    margin-bottom: 19px;
    padding-top: 16px;
    color: #555;
    font-size: 0.9rem;
}

.input-group input {
    width: 100%;
    padding: 0.8rem;
    padding-right: 2.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
    height: 45px; /* Fixed height for consistency */
}

/* Error message styling */
.error-message {
    color: #dc3545;
    font-size: 12px;
    margin-top: 5px;
    width: 100%;
    display: block;
    position: absolute;
    left: 0;
    bottom: -20px;
}

.text-danger {
    color: #dc3545;
    margin: 0.5rem 0;
    width: 100%;
}

.change-password-btn {
    width: 100%;
    padding: 1rem;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s;
}

.change-password-btn:hover {
    background-color: #0056b3;
}

.back-to-login {
    margin-top: 1.5rem;
    text-align: center;
    color: #666;
}

.back-to-login a {
    color: #007bff;
    text-decoration: none;
}

.back-to-login a:hover {
    text-decoration: underline;
}

.image-section {
    flex: 1;
    width: 50%;
    background-color: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
}

.image-section img {
    width: 740px;
    height: 740px;
    object-fit: cover;
}

@media (max-width: 768px) {
    .container {
        flex-direction: column;
    }
    
    .change-password-section {
        width: 100%;
        padding: 1rem;
    }
    
    .image-section {
        display: none;
    }
}
.input-group {
    position: relative;
}

.password-toggle {
    position: absolute;
    right: 12px;
    top: calc(50% + -2px); /* Adjusted to account for label */
    transform: translateY(-50%);
    cursor: pointer;
    width: 20px;
    height: 20px;
    border: none;
    background: none;
    padding: 0;
    z-index: 2; /* Ensure it stays above the input */
}

.input-group input {
    padding-right: 35px; /* Make room for the eye icon */
}
.input-wrapper {
    position: relative;
    width: 100%;
}

    </style>
</head>
<body>
    <div class="container">
        <div class="change-password-section">
            <div class="logo"> 
                <img src="/images/BrandName.png" alt="Expansy">
            </div>
        
            <h2>Create New Password</h2>
            <p class="instruction">Please enter your new password below</p>
            
            <form method="post" action="/change-password">
                <div class="input-group">
                    <label for="newPassword">NEW PASSWORD</label>
                    <div class="input-wrapper">
                        <input type="password" name="newPassword" id="newPassword">
                        <img id="new-password-eye" class="password-toggle" src="images/hide (1).png" alt="Toggle Password" width="20" height="20">
                    </div>
                </div>
                
                <div class="input-group">
                    <label for="confirmPassword">CONFIRM NEW PASSWORD</label>
                    <div class="input-wrapper">
                        <input type="password" name="confirmPassword" id="confirmPassword">
                        <img id="confirm-password-eye" class="password-toggle" src="images/hide (1).png" alt="Toggle Password" width="20" height="20">
                    </div>
                </div>
        
                <div class="text-danger text-center" style="display: none;">
                    
                </div>
        
                <button type="submit" class="change-password-btn">Change Password</button>
            </form>
        
            <p class="back-to-login">Remember your password? <a href="/login">Back to Login</a></p>
        </div>
        
        <div class="image-section">
            <img src="/images/enternewpassword-concept-illustration_114360-83.avif" alt="Change Password">
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
   const form = document.querySelector('form');
const newPasswordInput = document.getElementById('newPassword');
const confirmPasswordInput = document.getElementById('confirmPassword');
const errorDiv = document.querySelector('.text-danger');

// Password toggle functionality
function setupPasswordToggle(inputId, toggleId) {
    const input = document.getElementById(inputId);
    const toggle = document.getElementById(toggleId);
    
    toggle.addEventListener('click', function() {
        // Toggle password visibility
        if (input.type === 'password') {
            input.type = 'text';
            toggle.src = 'images/unhide.png'; // Change to your eye-open image
        } else {
            input.type = 'password';
            toggle.src = 'images/hide (1).png'; // Change to your eye-closed image
        }
    });
}

// Setup password toggles for both fields
setupPasswordToggle('newPassword', 'new-password-eye');
setupPasswordToggle('confirmPassword', 'confirm-password-eye');

// Add hover effect
const toggles = document.querySelectorAll('.password-toggle');
toggles.forEach(toggle => {
    toggle.addEventListener('mouseover', function() {
        this.style.opacity = '0.7';
    });
    
    toggle.addEventListener('mouseout', function() {
        this.style.opacity = '1';
    });
});

// Rest of your validation code remains the same
const patterns = {
    hasUpperCase: /[A-Z]/,
    hasLowerCase: /[a-z]/,
    hasNumber: /[0-9]/,
    hasSpecialChar: /[!@#$%^&*(),.?":{}|<>]/,
    minLength: 8
};

// Function to show input error
function showInputError(input, message) {
    const existingError = input.parentElement.querySelector('.error-message');
    if (existingError) {
        existingError.remove();
    }

    const errorSpan = document.createElement('span');
    errorSpan.className = 'error-message text-danger';
    errorSpan.style.fontSize = '12px';
    errorSpan.style.display = 'block';
    errorSpan.style.marginTop = '5px';
    errorSpan.textContent = message;
    input.parentElement.appendChild(errorSpan);
}

// Validate password strength
function validatePassword(password) {
    const requirements = [];
    
    if (!patterns.hasUpperCase.test(password)) {
        requirements.push('capital letter');
    }
    if (!patterns.hasNumber.test(password)) {
        requirements.push('number');
    }
    if (!patterns.hasSpecialChar.test(password)) {
        requirements.push('special character');
    }
    if (password.length < patterns.minLength) {
        requirements.push('8 characters');
    }
    
    if (requirements.length > 0) {
        return `Password must contain ${requirements.join(', ')}`;
    }
    return '';
}

// Form submission
form.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const newPassword = newPasswordInput.value;
    const confirmPassword = confirmPasswordInput.value;
    
    // Validate password
    const passwordError = validatePassword(newPassword);
    
    if (passwordError) {
        showInputError(newPasswordInput, passwordError);
        return;
    }
    
    // Check if passwords match
    if (newPassword !== confirmPassword) {
        showInputError(confirmPasswordInput, 'Passwords do not match');
        return;
    }
    
    try {
        const response = await fetch('/change-password', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                newPassword,
                confirmPassword
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Your password has been changed successfully.',
                confirmButtonColor: '#3085d6'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/login';
                }
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: data.message || 'Something went wrong!',
                confirmButtonColor: '#3085d6'
            });
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'An error occurred. Please try again.',
            confirmButtonColor: '#3085d6'
        });
    }
});
    </script>
</body>
</html>